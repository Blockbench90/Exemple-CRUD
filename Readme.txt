1. Первым делом, после создания папки проекта и ее названия, запускаем команду npm init и проходим путь "регистрации" проекта:
package name: (в скобках предложит название автоматически, исходя из названия папки проекта), можно просто согласиться, нажав Enter
version: (1.2.бла бла бла) соглашаемся, Enter
entry point: (index.js) предлагает главный файл, в моем случае это не дефолтный, ввожу app.js
test command: вводим если надо, в моем случае пропуск
git repository: я создавал в самом конце, если вы создали зарание, введите
keywords: ключевые слова, я натыкал разных, а вы на свое усмотрение
author: Обязательно указать себя, а то мало ли))) шутка, на свое усмотрение, если че, можно подправить опосля
но коль взялись писать себя в авторы, не забудьте после имени в <> кавычках указать email, так принято, что уж тут поделать
Далее Enter и еще раз, пропускаем соглашаясь со всем, и  идем в package.json смотреть на данные, если есть желание

2. Создаем проект. В корне будет находится бекенд, а дальше в будущей папке разместим фронтенд
устанавливаем базовые зависимости npm install express mongoose
для разработки с флагом -D, чтобы попало в dependencies
npm install -D nodemon concurrently
nodemon - для самостоятельного обновления проекта в браузере
concurrently - одновременно запускать и бекенд и фронэнд

3. Для удобства, устанавливаем фичу config, для удобства с разными константами
npm i config
после установки создаем папку config
а в ней файл default.json, куда и будем подключать константы
4. Создание базы данных в облачном сервисе MongoDB
После регистрации на cloud.mongodb.com, создаем проект, создаем бесплатный кластер, не забывая указать подключение к ней как к приложению (Connect Your Application)
если вы укажите свой IP, то не забудьте менять его после каждого нового подключения, если у вас динамический IP, как в большинстве подключений.
К примеру, я работаю с ноута, и дома у меня одно подключение, а на работе другое, я меняю их во вкладке NetworkAccess, хотя если нужно, можно указать
подключение для любого IP, я просто завтыкал это сделать, так что...
Все что нужно, для подключения к базе данных, это предложеный вам в конце URL, который нужно вставить в файл config, заменив там свое имя и пароль для подключения

4.bcryptjs
npm i bcryptjs для установки
Небольшая библиотека, позволяющая шифровать данные, в проекте нужна, чтобы не хранить пароли в сыром виде.
Чтобы не было как в пословице "Login: admin, Password: admin"

5. Валидатор на беке
npm i express-validator
Тут все на поверхности, данный модуль позволяет создавать валидацию, не прибегая к созданию ее в ручную
Подключили, задали условия и все.
Нужна она для тех случаев, если вдруг придет пустое поле, или неправильный email,
в таких случаях мы покажем на фронте милое сообщение или выдиление поля, чтобы было понятно что к чему, и чей прокол

6.Token
npm i jsonwebtoken
